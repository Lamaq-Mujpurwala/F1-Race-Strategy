# docker-compose.yml
# This version uses a single, standalone Airflow 3 service for simplicity and robustness.

version: '3.8'

services:
  # 1. PostgreSQL Database Service
  postgres:
    image: postgres:14-alpine
    container_name: f1_postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  # 2. Airflow Standalone Service
  # This single service runs the webserver, scheduler, and other components.
  # It will automatically initialize the database and create the admin user on first run.
  airflow:
    image: apache/airflow:latest-python3.11
    container_name: f1_airflow_standalone
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - PYTHONPATH=/opt/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./plugins:/opt/airflow/plugins
      - ./airflow_logs:/opt/airflow/logs
      - ./requirements.txt:/opt/airflow/requirements.txt
      - ./params.yaml:/opt/airflow/params.yaml
    ports:
      - "8080:8080"
    command: standalone
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    user: "${AIRFLOW_UID:-50000}"

volumes:
  postgres_data:
  airflow_logs: